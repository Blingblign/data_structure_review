package exer.algorithm;

/**动态规划：将一个大问题分解为很多子问题，但子问题往往不是相互独立的,
 * 即下一个子问题的求解是建立在上一个子问题求解的基础上，进一步地求解；
 *
 * 背包问题：
 * 有i件物品，每件物品的价值分别为v1,v2,...,vi,重量分别为w1,w2,...,wi;
 * 背包的总容量为j
 * 求背包所能容纳物品的最大总价值和放入背包的物品
 * @author bling
 * @create 2022-10-10 11:57
 */
public class KnapsackProblem {
}
